"use strict";(self.webpackChunkharmonizer_docs=self.webpackChunkharmonizer_docs||[]).push([[735],{4430:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"architecture","title":"System Architecture","description":"This section provides an overview of the system architecture behind OMSIM \u2014 the Ontology-Mediated Semantic Integration and Matching platform. The architecture is designed to ensure scalability, modularity, and efficiency for variable harmonization across heterogeneous biomedical datasets.","source":"@site/docs/Architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/omsim-documentation/architecture","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"architecture","title":"System Architecture","sidebar_label":"Architecture","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/omsim-documentation/authentication"},"next":{"title":"Overview","permalink":"/omsim-documentation/API/overview"}}');var t=i(4848),r=i(8453);const a={id:"architecture",title:"System Architecture",sidebar_label:"Architecture",sidebar_position:3},o="System Architecture",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. <strong>API Gateway</strong>",id:"1-api-gateway",level:3},{value:"2. <strong>Matching Engine</strong>",id:"2-matching-engine",level:3},{value:"3. <strong>Harmonization Service</strong>",id:"3-harmonization-service",level:3},{value:"4. <strong>Validation Service</strong>",id:"4-validation-service",level:3},{value:"5. <strong>Metadata Store</strong>",id:"5-metadata-store",level:3},{value:"6. <strong>Embedding Service</strong>",id:"6-embedding-service",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Extensibility",id:"extensibility",level:2},{value:"Security &amp; Logging",id:"security--logging",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"system-architecture",children:"System Architecture"})}),"\n",(0,t.jsxs)(n.p,{children:["This section provides an overview of the system architecture behind ",(0,t.jsx)(n.strong,{children:"OMSIM"})," \u2014 the ",(0,t.jsx)(n.em,{children:"Ontology-Mediated Semantic Integration and Matching"})," platform. The architecture is designed to ensure scalability, modularity, and efficiency for variable harmonization across heterogeneous biomedical datasets."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"OMSIM is composed of modular backend services and optional frontend components, orchestrated in a containerized environment. The system is language-agnostic at the API level and can be deployed either on cloud infrastructure (e.g., AWS, GCP) or on-premise."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsxs)(n.h3,{id:"1-api-gateway",children:["1. ",(0,t.jsx)(n.strong,{children:"API Gateway"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Acts as the entry point for all external requests."}),"\n",(0,t.jsx)(n.li,{children:"Routes requests to appropriate internal services."}),"\n",(0,t.jsx)(n.li,{children:"Handles authentication, rate limiting, and error formatting."}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"2-matching-engine",children:["2. ",(0,t.jsx)(n.strong,{children:"Matching Engine"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Uses pretrained NLP models and domain-specific embeddings."}),"\n",(0,t.jsx)(n.li,{children:"Matches raw column names to controlled vocabulary terms (e.g., SNOMED CT, HPO, LOINC)."}),"\n",(0,t.jsx)(n.li,{children:"Implements cosine similarity, fuzzy matching, and ontology graph distance heuristics."}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"3-harmonization-service",children:["3. ",(0,t.jsx)(n.strong,{children:"Harmonization Service"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Receives raw datasets and variable metadata."}),"\n",(0,t.jsx)(n.li,{children:"Transforms and aligns variable names to standardized representations."}),"\n",(0,t.jsx)(n.li,{children:"Outputs harmonized data dictionaries and mapping logs."}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"4-validation-service",children:["4. ",(0,t.jsx)(n.strong,{children:"Validation Service"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Performs quality checks on incoming datasets."}),"\n",(0,t.jsx)(n.li,{children:"Validates against expected data types, missing values, and ontology coverage."}),"\n",(0,t.jsx)(n.li,{children:"Returns feedback for corrections before harmonization."}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"5-metadata-store",children:["5. ",(0,t.jsx)(n.strong,{children:"Metadata Store"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stores user-uploaded dictionaries and harmonized versions."}),"\n",(0,t.jsx)(n.li,{children:"Maintains audit logs, harmonization reports, and session-based mappings."}),"\n",(0,t.jsx)(n.li,{children:"Enables traceability and reproducibility."}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"6-embedding-service",children:["6. ",(0,t.jsx)(n.strong,{children:"Embedding Service"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Hosts sentence and word embedding models."}),"\n",(0,t.jsx)(n.li,{children:"Provides vector representations of variables and ontology terms."}),"\n",(0,t.jsx)(n.li,{children:"Supports on-demand model updates and caching."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User submits data"})," to the ",(0,t.jsx)(n.code,{children:"/match"})," or ",(0,t.jsx)(n.code,{children:"/harmonize"})," endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API Gateway"})," validates request and forwards to the relevant service."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Matching Engine"})," processes variable names and returns semantic alignments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Harmonization Service"})," applies transformations based on the matches."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validation Service"})," optionally runs final checks."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Results and logs"})," are returned to the user and stored in the metadata store."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,t.jsx)(n.p,{children:"OMSIM supports multiple deployment modes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Docker Compose"})," (development and small-scale testing)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kubernetes"})," (production-scale with auto-scaling)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Serverless APIs"})," (for lightweight usage)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Environment variables are used to configure model paths, storage, logging levels, and security settings."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"extensibility",children:"Extensibility"}),"\n",(0,t.jsx)(n.p,{children:"OMSIM is designed for extensibility:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Plug in your own ",(0,t.jsx)(n.strong,{children:"ontology"})," via a JSON or OWL file."]}),"\n",(0,t.jsxs)(n.li,{children:["Swap out the ",(0,t.jsx)(n.strong,{children:"embedding model"})," (e.g., BioBERT, ClinicalBERT, GloVe)."]}),"\n",(0,t.jsx)(n.li,{children:"Integrate custom post-processing logic."}),"\n",(0,t.jsx)(n.li,{children:"Add new endpoints via the modular Flask-based API."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"security--logging",children:"Security & Logging"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All endpoints require authentication tokens."}),"\n",(0,t.jsx)(n.li,{children:"Audit logs are stored securely with timestamps and hashed user IDs."}),"\n",(0,t.jsx)(n.li,{children:"Sensitive data is not persisted unless explicitly requested and authorized."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"OMSIM is a robust, scalable, and modular platform tailored for semantic harmonization in biomedical research. The architecture supports advanced AI-based matching, structured transformations, and continuous feedback from domain experts \u2014 all within a flexible deployment and integration ecosystem."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);