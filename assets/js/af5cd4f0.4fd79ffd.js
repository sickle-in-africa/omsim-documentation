"use strict";(self.webpackChunkharmonizer_docs=self.webpackChunkharmonizer_docs||[]).push([[256],{2068:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"examples","title":"Example Workflows","description":"This page demonstrates real-world use cases for the OMSIM API. These examples show how to interact with the /match, /harmonize, and /validate endpoints using sample datasets or data dictionaries.","source":"@site/docs/Examples.md","sourceDirName":".","slug":"/examples","permalink":"/omsim-documentation/examples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"examples","title":"Example Workflows","sidebar_label":"Examples","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"validate","permalink":"/omsim-documentation/API/validate"},"next":{"title":"Errors","permalink":"/omsim-documentation/errors"}}');var s=a(4848),o=a(8453);const t={id:"examples",title:"Example Workflows",sidebar_label:"Examples",sidebar_position:5},r="Example Workflows",l={},d=[{value:"1. Matching Free-Text Variables to Ontologies",id:"1-matching-free-text-variables-to-ontologies",level:2},{value:"Example curl Command",id:"example-curl-command",level:4},{value:"Sample Response",id:"sample-response",level:4},{value:"2. Harmonizing a Dataset Dictionary",id:"2-harmonizing-a-dataset-dictionary",level:2},{value:"Python Example",id:"python-example",level:4},{value:"3. Validating a Dataset Before Harmonization",id:"3-validating-a-dataset-before-harmonization",level:2},{value:"Validation Request",id:"validation-request",level:4},{value:"Possible Response",id:"possible-response",level:4},{value:"4. Automating OMSIM in a Pipeline",id:"4-automating-omsim-in-a-pipeline",level:2},{value:"Notes",id:"notes",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"example-workflows",children:"Example Workflows"})}),"\n",(0,s.jsxs)(n.p,{children:["This page demonstrates real-world use cases for the OMSIM API. These examples show how to interact with the ",(0,s.jsx)(n.code,{children:"/match"}),", ",(0,s.jsx)(n.code,{children:"/harmonize"}),", and ",(0,s.jsx)(n.code,{children:"/validate"})," endpoints using sample datasets or data dictionaries."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-matching-free-text-variables-to-ontologies",children:"1. Matching Free-Text Variables to Ontologies"}),"\n",(0,s.jsx)(n.p,{children:"You have a raw list of variable names from a legacy dataset:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'["Age", "Sex", "Blood Pressure", "Weight"]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"example-curl-command",children:"Example curl Command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'curl -X POST https://your-server.com/api/match \\\n  -H "Authorization: Bearer YOUR_TOKEN" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "columns": ["Age", "Sex", "Blood Pressure", "Weight"]\n  }\'\n'})}),"\n",(0,s.jsx)(n.h4,{id:"sample-response",children:"Sample Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[\n  {\n    "original": "Age",\n    "matched_term": "age_in_years",\n    "ontology": "SNOMED",\n    "score": 0.97\n  },\n  {\n    "original": "Sex",\n    "matched_term": "biological_sex",\n    "ontology": "HPO",\n    "score": 0.95\n  }\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"2-harmonizing-a-dataset-dictionary",children:"2. Harmonizing a Dataset Dictionary"}),"\n",(0,s.jsx)(n.p,{children:"You have a CSV data dictionary located at:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"https://example.org/data_dictionary.csv\n"})}),"\n",(0,s.jsx)(n.p,{children:"You want OMSIM to harmonize all columns to ontologies via /harmonize."}),"\n",(0,s.jsx)(n.h4,{id:"python-example",children:"Python Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import requests\n\nurl = "https://your-server.com/api/harmonize"\nheaders = {\n    "Authorization": "Bearer YOUR_TOKEN",\n    "Content-Type": "application/json"\n}\npayload = {\n    "file_url": "https://example.org/data_dictionary.csv",\n    "file_type": "dictionary"\n}\n\nresponse = requests.post(url, headers=headers, json=payload)\nprint(response.json())\n'})}),"\n",(0,s.jsx)(n.h2,{id:"3-validating-a-dataset-before-harmonization",children:"3. Validating a Dataset Before Harmonization"}),"\n",(0,s.jsx)(n.p,{children:"Before running /harmonize, you want to make sure your CSV is correctly formatted."}),"\n",(0,s.jsx)(n.h4,{id:"validation-request",children:"Validation Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'curl -X POST https://your-server.com/api/validate \\\n  -H "Authorization: Bearer YOUR_TOKEN" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "file_url": "https://example.org/data_dictionary.csv",\n    "file_type": "dictionary"\n  }\n'})}),"\n",(0,s.jsx)(n.h4,{id:"possible-response",children:"Possible Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "status": "valid",\n  "issues": [],\n  "metadata": {\n    "column_count": 10,\n    "row_count": 120\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"4-automating-omsim-in-a-pipeline",children:"4. Automating OMSIM in a Pipeline"}),"\n",(0,s.jsx)(n.p,{children:"Many users incorporate OMSIM into ETL workflows. A common pattern:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Use /validate to check incoming files"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If valid, call /harmonize"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Post-process results (e.g., rename headers, map values)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Store harmonized version for analysis"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This pattern ensures consistent, ontology-aligned data across datasets and timepoints."}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"All endpoints require a Bearer token."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"OMSIM supports datasets in CSV and XLSX format."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In future versions, we will support drag-and-drop UI uploads and dataset versioning."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>r});var i=a(6540);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);